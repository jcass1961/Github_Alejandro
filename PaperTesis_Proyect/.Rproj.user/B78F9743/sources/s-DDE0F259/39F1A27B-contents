library("wesanderson")
require(tidyverse)
require(ggthemes)
require(rstudioapi)

library("cubature")
library("Conake")

library("caTools")



library(MASS)
library("stats4")


set.seed(1234)


### DIRECTORIO DONDE ESTAN LAS BASES
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()

setwd("../../")




### CARGO RUTINAS
source("Code/Rutinas/imagematrix.R")
source("Code/Rutinas/myread.ENVI.R")
source("Code/Rutinas/estima numero de looks muestras de tamanio gral_V2.R")
source("Code/Rutinas/elige una muestra_V4.R")
source("Code/Rutinas/ModeloGammaKS_qqplot.R")
source("Code/Rutinas/MV_Gama.R")
source("Code/Rutinas/Define densidad GI0.R")

############################################
## PARA ESTIMAR PARAMETROS 
source("Code/Rutinas/DistanciaTriangularNG1conCte.R")
source("Code/Rutinas/DistanciaTriangularLNconCte.R")
source("Code/Rutinas/LogcumulantOrden1.R")
source("Code/Rutinas/MV Estimador.R")

source("Code/Rutinas/EstimaUnPar_MuestrasReales.R")




source("Code/Rutinas/nucleos.R")                ###############
source("Code/Rutinas/CrossValidationdeR.R")     ###############
source("Code/Rutinas/MOM_1medio.R")
source("Code/Rutinas/Conakereport2conIntegrate.R")                ###############
source("Code/Rutinas/Conakereport2.R") 
source("Code/Rutinas/procesamiento piramidal_V2.R")
source("Code/Rutinas/DensitiesGI0Alejandro.R")

source("Code/Rutinas/GraficaMuestra.R")

setwd("./Data/PaperTesis")

a0<-read.ENVI("dlr_munich_4s.flt")

b0<-a0^2

#plot(imagematrix(matrix(ecdf(b0)(b0), nrow=nrow(b0))))

imagen.recortada<-b0[180:400,20:250]
#imagen.recortada<-b0[180:450,20:250]

### GRAFICO LA IMAGEN NORMALIZADA Y ECUALIZADA
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(matrix(ecdf(imagen.recortada)(imagen.recortada), nrow=nrow(imagen.recortada))))

### ESTIMO NUMERO DE LOKS
#looks<-elige.muestra(imagen.recortada)


#mean(looks$muestra)^2/sd(looks$muestra)^2


##########################################################
## APLICO PROCESAMIENTO PIRAMIDAL

piramidal.MUNICH<-proc.piram(2,imagen.recortada)

#View(mapa.media)
dim(piramidal.MUNICH)

### GRAFICO IMAGEN PIRAMIDAL NORMALIZADA Y ECUALIZADA

# windows(width=6.5, height=6.5, rescale="fit")
# plot(imagematrix(normalize(matrix(ecdf(piramidal.MUNICH)(piramidal.MUNICH), nrow=dim(piramidal.MUNICH)[1], ncol=dim(piramidal.MUNICH)[2]))))



#looks.piramidal<-elige.muestra(piramidal.MUNICH)


#L=mean(looks.piramidal$muestra)^2/sd(looks.piramidal$muestra)^2
L=3.21

########################################
## Recorto imagen
#  windows(width=6.5, height=6.5, rescale="fit")
#  plot(imagematrix(normalize(matrix(ecdf(piramidal.MUNICH)(piramidal.MUNICH), nrow=dim(piramidal.MUNICH)[1], ncol=dim(piramidal.MUNICH)[2]))))
# 
# muestra.recortada<-elige.muestra(piramidal.MUNICH,"red")

############################################################
## ESTIMO

piramidal.munich.recortada<-piramidal.MUNICH[63:90,0:42]
#piramidal.munich.recortada<-piramidal.MUNICH[49:110,0:46]
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.munich.recortada)(piramidal.munich.recortada), 
                                  nrow=dim(piramidal.munich.recortada)[1], ncol=dim(piramidal.munich.recortada)[2]))))
#View(piramidal.MUNICH)

######## coordenandas originales
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.MUNICH)(piramidal.MUNICH), 
                                  nrow=dim(piramidal.MUNICH)[1], ncol=dim(piramidal.MUNICH)[2]))))

grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,76,79,"yellow",2)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,77,79,"blue",2)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,77,80,"red",2)#muestra3##########



y1R.nuevo<-77-48
y2R.nuevo<-80-48

y1B.nuevo<-77-48
y2B.nuevo<-79-48

y1A.nuevo<-76-48
y2A.nuevo<-79-48
# 
# lty=1
# lwd=2
# segments(19,y1A.nuevo,19,y2A.nuevo,col="red",lty=lty,lwd=lwd)
# segments(19,y2A.nuevo,22,y2A.nuevo,col="red",lty=lty,lwd=lwd)
# segments(22,y2A.nuevo,22,y1A.nuevo,col="red",lty=lty,lwd=lwd)
# segments(22,y1A.nuevo,19,y1A.nuevo,col="red",lty=lty,lwd=lwd)

lwd=2
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.MUNICH)(piramidal.MUNICH), 
                                  nrow=dim(piramidal.MUNICH)[1], ncol=dim(piramidal.MUNICH)[2]))))

grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1R.nuevo,y2R.nuevo,"red",lwd)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1B.nuevo,y2B.nuevo,"blue",lwd)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1A.nuevo,y2A.nuevo,"yellow",lwd)#muestra1##########


muestra1<-piramidal.munich.recortada[y1R.nuevo:y2R.nuevo,19:22]/mean(piramidal.munich.recortada[y1R.nuevo:y2R.nuevo,19:22])
muestra2<-piramidal.munich.recortada[y1B.nuevo:y2B.nuevo,19:22]/mean(piramidal.munich.recortada[y1B.nuevo:y2B.nuevo,19:22])
muestra3<-piramidal.munich.recortada[y1A.nuevo:y2A.nuevo,19:22]/mean(piramidal.munich.recortada[y1A.nuevo:y2A.nuevo,19:22])

a.estim1<-estima.unpar(as.vector(muestra1),L)
a.estim1

a.estim2<-estima.unpar(as.vector(muestra2),L)
a.estim2

a.estim3<-estima.unpar(as.vector(muestra3),L)
a.estim3

setwd("C:/Users/usuario/Dropbox/Procesamiento de imagenes/KernelEstimation/Figures/Tesis/ImagenReal")
ggsave("TresMuestrasAgrandada.pdf", plot = last_plot(), device = "pdf",scale=1.2)

