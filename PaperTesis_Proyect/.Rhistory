windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.MUNICH)(piramidal.MUNICH), nrow=dim(piramidal.MUNICH)[1], ncol=dim(piramidal.MUNICH)[2]))))
#View(piramidal.MUNICH)
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,76,79,"yellow",2)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,20,21,77,78,"red",2)#muestra2
grafica.muestra.imagenRecortada(piramidal.MUNICH,18,23,75,80,"blue",2)#muestra3
grafica.muestra.imagenRecortada(piramidal.MUNICH,17,24,74,81,"green",2)#muestra3
grafica.muestra.imagenRecortada(piramidal.MUNICH,16,25,73,82,"magenta",2)#muestra3
##################### GRABA GRAFICOS
setwd("../../figures/ConModificacionAlejandro")
getwd()
ggsave("CincoMuestras.pdf", plot = last_plot(), device = "pdf",scale=1.2)
library("wesanderson")
require(tidyverse)
require(ggthemes)
require(rstudioapi)
library("cubature")
library("Conake")
library("caTools")
library(MASS)
library("stats4")
set.seed(1234)
### DIRECTORIO DONDE ESTAN LAS BASES
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
### CARGO RUTINAS
source("../Rutinas/imagematrix.R")
source("../Rutinas/myread.ENVI.R")
source("../Rutinas/estima numero de looks muestras de tamanio gral_V2.R")
source("../Rutinas/elige una muestra_V4.R")
source("../Rutinas/ModeloGammaKS_qqplot.R")
source("../Rutinas/MV_Gama.R")
source("../Rutinas/Define densidad GI0.R")
############################################
## PARA ESTIMAR PARAMETROS
source("../Rutinas/DistanciaTriangularNG1conCte.R")
source("../Rutinas/DistanciaTriangularLNconCte.R")
source("../Rutinas/LogcumulantOrden1.R")
source("../Rutinas/MV Estimador.R")
source("../Rutinas/EstimaUnPar_MuestrasReales.R")
source("../Rutinas/nucleos.R")                ###############
source("../Rutinas/CrossValidationdeR.R")     ###############
source("../Rutinas/MOM_1medio.R")
source("../Rutinas/Conakereport2conIntegrate.R")                ###############
source("../Rutinas/Conakereport2.R")
source("../Rutinas/procesamiento piramidal_V2.R")
source("../Rutinas/DensitiesGI0Alejandro.R")
source("../Rutinas/GraficaMuestra.R")
setwd("../../Data/PaperTesis")
a0<-read.ENVI("C:/Users/julia/Dropbox/Procesamiento de imagenes/KerEst/Images/tesis/dlr_munich_4s.flt")
b0<-a0^2
imagen.recortada<-b0[180:400,20:250]
##########################################################
## APLICO PROCESAMIENTO PIRAMIDAL
piramidal.MUNICH<-proc.piram(2,imagen.recortada)
L=3.21
##################### GRABA GRAFICOS
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.MUNICH)(piramidal.MUNICH), nrow=dim(piramidal.MUNICH)[1], ncol=dim(piramidal.MUNICH)[2]))))
#View(piramidal.MUNICH)
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,76,79,"yellow",2)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,20,21,77,78,"red",2)#muestra2
grafica.muestra.imagenRecortada(piramidal.MUNICH,18,23,75,80,"blue",2)#muestra3
grafica.muestra.imagenRecortada(piramidal.MUNICH,17,24,74,81,"green",2)#muestra3
grafica.muestra.imagenRecortada(piramidal.MUNICH,16,25,73,82,"magenta",2)#muestra3
##################### GRABA GRAFICOS
setwd("../../figures/ConModificacionAlejandro")
getwd()
ggsave("CincoMuestras.pdf", plot = last_plot(), device = "pdf",scale=1.2)
library("wesanderson")
require(tidyverse)
require(ggthemes)
require(rstudioapi)
library("cubature")
library("Conake")
library("caTools")
library(MASS)
library("stats4")
set.seed(1234)
### DIRECTORIO DONDE ESTAN LAS BASES
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
setwd("../../")
### CARGO RUTINAS
source("Code/Rutinas/imagematrix.R")
source("Code/Rutinas/myread.ENVI.R")
source("Code/Rutinas/estima numero de looks muestras de tamanio gral_V2.R")
source("Code/Rutinas/elige una muestra_V4.R")
source("Code/Rutinas/ModeloGammaKS_qqplot.R")
source("Code/Rutinas/MV_Gama.R")
source("Code/Rutinas/Define densidad GI0.R")
############################################
## PARA ESTIMAR PARAMETROS
source("Code/Rutinas/DistanciaTriangularNG1conCte.R")
source("Code/Rutinas/DistanciaTriangularLNconCte.R")
source("Code/Rutinas/LogcumulantOrden1.R")
source("Code/Rutinas/MV Estimador.R")
source("Code/Rutinas/EstimaUnPar_MuestrasReales.R")
source("Code/Rutinas/nucleos.R")                ###############
source("Code/Rutinas/CrossValidationdeR.R")     ###############
source("Code/Rutinas/MOM_1medio.R")
source("Code/Rutinas/Conakereport2conIntegrate.R")                ###############
source("Code/Rutinas/Conakereport2.R")
source("Code/Rutinas/procesamiento piramidal_V2.R")
source("Code/Rutinas/DensitiesGI0Alejandro.R")
source("Code/Rutinas/GraficaMuestra.R")
setwd("./Data/PaperTesis")
a0<-read.ENVI("dlr_munich_4s.flt")
b0<-a0^2
#plot(imagematrix(matrix(ecdf(b0)(b0), nrow=nrow(b0))))
imagen.recortada<-b0[180:400,20:250]
#imagen.recortada<-b0[180:450,20:250]
### GRAFICO LA IMAGEN NORMALIZADA Y ECUALIZADA
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(matrix(ecdf(imagen.recortada)(imagen.recortada), nrow=nrow(imagen.recortada))))
### ESTIMO NUMERO DE LOKS
#looks<-elige.muestra(imagen.recortada)
#mean(looks$muestra)^2/sd(looks$muestra)^2
##########################################################
## APLICO PROCESAMIENTO PIRAMIDAL
piramidal.MUNICH<-proc.piram(2,imagen.recortada)
#View(mapa.media)
dim(piramidal.MUNICH)
### GRAFICO IMAGEN PIRAMIDAL NORMALIZADA Y ECUALIZADA
# windows(width=6.5, height=6.5, rescale="fit")
# plot(imagematrix(normalize(matrix(ecdf(piramidal.MUNICH)(piramidal.MUNICH), nrow=dim(piramidal.MUNICH)[1], ncol=dim(piramidal.MUNICH)[2]))))
L=3.21
########################################
## Recorto imagen
#  windows(width=6.5, height=6.5, rescale="fit")
#  plot(imagematrix(normalize(matrix(ecdf(piramidal.MUNICH)(piramidal.MUNICH), nrow=dim(piramidal.MUNICH)[1], ncol=dim(piramidal.MUNICH)[2]))))
#
# muestra.recortada<-elige.muestra(piramidal.MUNICH,"red")
############################################################
## ESTIMO
piramidal.munich.recortada<-piramidal.MUNICH[63:90,0:42]
#piramidal.munich.recortada<-piramidal.MUNICH[49:110,0:46]
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.munich.recortada)(piramidal.munich.recortada),
nrow=dim(piramidal.munich.recortada)[1], ncol=dim(piramidal.munich.recortada)[2]))))
#View(piramidal.MUNICH)
y1R.nuevo<-77-48
y2R.nuevo<-80-48
y1B.nuevo<-77-48
y2B.nuevo<-79-48
y1A.nuevo<-76-48
y2A.nuevo<-79-48
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1R.nuevo,y2R.nuevo,"red")#muestra1##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1B.nuevo,y2B.nuevo,"blue")#muestra2##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1A.nuevo,y2A.nuevo,"yellow")#muestra1##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1R.nuevo,y2R.nuevo,"red",lwd)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1B.nuevo,y2B.nuevo,"blue",lwd)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1A.nuevo,y2A.nuevo,"yellow",lwd)#muestra1##########
lty=1
lwd=2
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1R.nuevo,y2R.nuevo,"red",lwd)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1B.nuevo,y2B.nuevo,"blue",lwd)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1A.nuevo,y2A.nuevo,"yellow",lwd)#muestra1##########
y1R.nuevo<-77
y2R.nuevo<-80
y1B.nuevo<-77
y2B.nuevo<-79
y1A.nuevo<-76
y2A.nuevo<-79
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1R.nuevo,y2R.nuevo,"red",lwd)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1B.nuevo,y2B.nuevo,"blue",lwd)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1A.nuevo,y2A.nuevo,"yellow",lwd)#muestra1##########
#piramidal.munich.recortada<-piramidal.MUNICH[49:110,0:46]
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.munich.recortada)(piramidal.munich.recortada),
nrow=dim(piramidal.munich.recortada)[1], ncol=dim(piramidal.munich.recortada)[2]))))
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1R.nuevo,y2R.nuevo,"red",lwd)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1B.nuevo,y2B.nuevo,"blue",lwd)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1A.nuevo,y2A.nuevo,"yellow",lwd)#muestra1##########
y1R.nuevo<-77-58
y2R.nuevo<-80-58
y1B.nuevo<-77-58
y2B.nuevo<-79-58
y1A.nuevo<-76-58
y2A.nuevo<-79-58
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1R.nuevo,y2R.nuevo,"red",lwd)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1B.nuevo,y2B.nuevo,"blue",lwd)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1A.nuevo,y2A.nuevo,"yellow",lwd)#muestra1##########
y1R.nuevo<-77-62
y2R.nuevo<-80-62
y1B.nuevo<-77-62
y2B.nuevo<-79-62
y1A.nuevo<-76-62
y2A.nuevo<-79-62
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1R.nuevo,y2R.nuevo,"red",lwd)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1B.nuevo,y2B.nuevo,"blue",lwd)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1A.nuevo,y2A.nuevo,"yellow",lwd)#muestra1##########
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.munich.recortada)(piramidal.munich.recortada),
nrow=dim(piramidal.munich.recortada)[1], ncol=dim(piramidal.munich.recortada)[2]))))
y1R.nuevo<-77-62
y2R.nuevo<-80-62
y1B.nuevo<-77-62
y2B.nuevo<-79-62
y1A.nuevo<-76-62
y2A.nuevo<-79-62
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1R.nuevo,y2R.nuevo,"red",lwd)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1B.nuevo,y2B.nuevo,"blue",lwd)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1A.nuevo,y2A.nuevo,"yellow",lwd)#muestra1##########
y1R.nuevo<-77-48
y2R.nuevo<-80-48
y1B.nuevo<-77-48
y2B.nuevo<-79-48
y1A.nuevo<-76-48
y2A.nuevo<-79-48
muestra1<-piramidal.munich.recortada[y1R.nuevo:y2R.nuevo,19:22]/mean(piramidal.munich.recortada[y1R.nuevo:y2R.nuevo,19:22])
muestra2<-piramidal.munich.recortada[y1B.nuevo:y2B.nuevo,19:22]/mean(piramidal.munich.recortada[y1B.nuevo:y2B.nuevo,19:22])
muestra3<-piramidal.munich.recortada[y1A.nuevo:y2A.nuevo,19:22]/mean(piramidal.munich.recortada[y1A.nuevo:y2A.nuevo,19:22])
y1R.nuevo<-77-48
y2R.nuevo<-80-48
y1B.nuevo<-77-48
y2B.nuevo<-79-48
y1A.nuevo<-76-48
y2A.nuevo<-79-48
muestra1<-piramidal.munich.recortada[y1R.nuevo:y2R.nuevo,19:22]/mean(piramidal.munich.recortada[y1R.nuevo:y2R.nuevo,19:22])
muestra2<-piramidal.munich.recortada[y1B.nuevo:y2B.nuevo,19:22]/mean(piramidal.munich.recortada[y1B.nuevo:y2B.nuevo,19:22])
muestra3<-piramidal.munich.recortada[y1A.nuevo:y2A.nuevo,19:22]/mean(piramidal.munich.recortada[y1A.nuevo:y2A.nuevo,19:22])
library("wesanderson")
require(tidyverse)
require(ggthemes)
require(rstudioapi)
library("cubature")
library("Conake")
library("caTools")
library(MASS)
library("stats4")
set.seed(1234)
### DIRECTORIO DONDE ESTAN LAS BASES
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
setwd("../../")
### CARGO RUTINAS
source("Code/Rutinas/imagematrix.R")
source("Code/Rutinas/myread.ENVI.R")
source("Code/Rutinas/estima numero de looks muestras de tamanio gral_V2.R")
source("Code/Rutinas/elige una muestra_V4.R")
source("Code/Rutinas/ModeloGammaKS_qqplot.R")
source("Code/Rutinas/MV_Gama.R")
source("Code/Rutinas/Define densidad GI0.R")
############################################
## PARA ESTIMAR PARAMETROS
source("Code/Rutinas/DistanciaTriangularNG1conCte.R")
source("Code/Rutinas/DistanciaTriangularLNconCte.R")
source("Code/Rutinas/LogcumulantOrden1.R")
source("Code/Rutinas/MV Estimador.R")
source("Code/Rutinas/EstimaUnPar_MuestrasReales.R")
source("Code/Rutinas/nucleos.R")                ###############
source("Code/Rutinas/CrossValidationdeR.R")     ###############
source("Code/Rutinas/MOM_1medio.R")
source("Code/Rutinas/Conakereport2conIntegrate.R")                ###############
source("Code/Rutinas/Conakereport2.R")
source("Code/Rutinas/procesamiento piramidal_V2.R")
source("Code/Rutinas/DensitiesGI0Alejandro.R")
source("Code/Rutinas/GraficaMuestra.R")
setwd("./Data/PaperTesis")
a0<-read.ENVI("dlr_munich_4s.flt")
b0<-a0^2
#plot(imagematrix(matrix(ecdf(b0)(b0), nrow=nrow(b0))))
imagen.recortada<-b0[180:400,20:250]
#imagen.recortada<-b0[180:450,20:250]
### GRAFICO LA IMAGEN NORMALIZADA Y ECUALIZADA
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(matrix(ecdf(imagen.recortada)(imagen.recortada), nrow=nrow(imagen.recortada))))
### ESTIMO NUMERO DE LOKS
#looks<-elige.muestra(imagen.recortada)
#mean(looks$muestra)^2/sd(looks$muestra)^2
##########################################################
## APLICO PROCESAMIENTO PIRAMIDAL
piramidal.MUNICH<-proc.piram(2,imagen.recortada)
#View(mapa.media)
dim(piramidal.MUNICH)
### GRAFICO IMAGEN PIRAMIDAL NORMALIZADA Y ECUALIZADA
# windows(width=6.5, height=6.5, rescale="fit")
# plot(imagematrix(normalize(matrix(ecdf(piramidal.MUNICH)(piramidal.MUNICH), nrow=dim(piramidal.MUNICH)[1], ncol=dim(piramidal.MUNICH)[2]))))
#looks.piramidal<-elige.muestra(piramidal.MUNICH)
#L=mean(looks.piramidal$muestra)^2/sd(looks.piramidal$muestra)^2
L=3.21
########################################
## Recorto imagen
#  windows(width=6.5, height=6.5, rescale="fit")
#  plot(imagematrix(normalize(matrix(ecdf(piramidal.MUNICH)(piramidal.MUNICH), nrow=dim(piramidal.MUNICH)[1], ncol=dim(piramidal.MUNICH)[2]))))
#
# muestra.recortada<-elige.muestra(piramidal.MUNICH,"red")
############################################################
## ESTIMO
piramidal.munich.recortada<-piramidal.MUNICH[63:90,0:42]
#piramidal.munich.recortada<-piramidal.MUNICH[49:110,0:46]
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.munich.recortada)(piramidal.munich.recortada),
nrow=dim(piramidal.munich.recortada)[1], ncol=dim(piramidal.munich.recortada)[2]))))
#View(piramidal.MUNICH)
######## coordenandas originales
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,76,79,"yellow")#muestra1##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,77,79,"blue")#muestra2##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,77,80,"red")#muestra3##########
piramidal.munich.recortada<-piramidal.MUNICH[63:90,0:42]
#piramidal.munich.recortada<-piramidal.MUNICH[49:110,0:46]
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.munich.recortada)(piramidal.munich.recortada),
nrow=dim(piramidal.munich.recortada)[1], ncol=dim(piramidal.munich.recortada)[2]))))
#View(piramidal.MUNICH)
######## coordenandas originales
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,76,79,"yellow",2)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,77,79,"blue",2)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,77,80,"red",2)#muestra3##########
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.munich)(piramidal.munich),
nrow=dim(piramidal.munich)[1], ncol=dim(piramidal.munich)[2]))))
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,76,79,"yellow",2)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,77,79,"blue",2)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,77,80,"red",2)#muestra3##########
library("wesanderson")
require(tidyverse)
require(ggthemes)
require(rstudioapi)
library("cubature")
library("Conake")
library("caTools")
library(MASS)
library("stats4")
set.seed(1234)
### DIRECTORIO DONDE ESTAN LAS BASES
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
setwd("../../")
### CARGO RUTINAS
source("Code/Rutinas/imagematrix.R")
source("Code/Rutinas/myread.ENVI.R")
source("Code/Rutinas/estima numero de looks muestras de tamanio gral_V2.R")
source("Code/Rutinas/elige una muestra_V4.R")
source("Code/Rutinas/ModeloGammaKS_qqplot.R")
source("Code/Rutinas/MV_Gama.R")
source("Code/Rutinas/Define densidad GI0.R")
############################################
## PARA ESTIMAR PARAMETROS
source("Code/Rutinas/DistanciaTriangularNG1conCte.R")
source("Code/Rutinas/DistanciaTriangularLNconCte.R")
source("Code/Rutinas/LogcumulantOrden1.R")
source("Code/Rutinas/MV Estimador.R")
source("Code/Rutinas/EstimaUnPar_MuestrasReales.R")
source("Code/Rutinas/nucleos.R")                ###############
source("Code/Rutinas/CrossValidationdeR.R")     ###############
source("Code/Rutinas/MOM_1medio.R")
source("Code/Rutinas/Conakereport2conIntegrate.R")                ###############
source("Code/Rutinas/Conakereport2.R")
source("Code/Rutinas/procesamiento piramidal_V2.R")
source("Code/Rutinas/DensitiesGI0Alejandro.R")
source("Code/Rutinas/GraficaMuestra.R")
setwd("./Data/PaperTesis")
a0<-read.ENVI("dlr_munich_4s.flt")
b0<-a0^2
#plot(imagematrix(matrix(ecdf(b0)(b0), nrow=nrow(b0))))
imagen.recortada<-b0[180:400,20:250]
#imagen.recortada<-b0[180:450,20:250]
### GRAFICO LA IMAGEN NORMALIZADA Y ECUALIZADA
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(matrix(ecdf(imagen.recortada)(imagen.recortada), nrow=nrow(imagen.recortada))))
### ESTIMO NUMERO DE LOKS
#looks<-elige.muestra(imagen.recortada)
#mean(looks$muestra)^2/sd(looks$muestra)^2
##########################################################
## APLICO PROCESAMIENTO PIRAMIDAL
piramidal.MUNICH<-proc.piram(2,imagen.recortada)
#View(mapa.media)
dim(piramidal.MUNICH)
### GRAFICO IMAGEN PIRAMIDAL NORMALIZADA Y ECUALIZADA
# windows(width=6.5, height=6.5, rescale="fit")
# plot(imagematrix(normalize(matrix(ecdf(piramidal.MUNICH)(piramidal.MUNICH), nrow=dim(piramidal.MUNICH)[1], ncol=dim(piramidal.MUNICH)[2]))))
#looks.piramidal<-elige.muestra(piramidal.MUNICH)
#L=mean(looks.piramidal$muestra)^2/sd(looks.piramidal$muestra)^2
L=3.21
########################################
## Recorto imagen
#  windows(width=6.5, height=6.5, rescale="fit")
#  plot(imagematrix(normalize(matrix(ecdf(piramidal.MUNICH)(piramidal.MUNICH), nrow=dim(piramidal.MUNICH)[1], ncol=dim(piramidal.MUNICH)[2]))))
#
# muestra.recortada<-elige.muestra(piramidal.MUNICH,"red")
############################################################
## ESTIMO
piramidal.munich.recortada<-piramidal.MUNICH[63:90,0:42]
#piramidal.munich.recortada<-piramidal.MUNICH[49:110,0:46]
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.munich.recortada)(piramidal.munich.recortada),
nrow=dim(piramidal.munich.recortada)[1], ncol=dim(piramidal.munich.recortada)[2]))))
#View(piramidal.MUNICH)
######## coordenandas originales
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.munich)(piramidal.munich),
nrow=dim(piramidal.munich)[1], ncol=dim(piramidal.munich)[2]))))
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,76,79,"yellow",2)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,77,79,"blue",2)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,77,80,"red",2)#muestra3##########
piramidal.munich.recortada<-piramidal.MUNICH[63:90,0:42]
#piramidal.munich.recortada<-piramidal.MUNICH[49:110,0:46]
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.munich.recortada)(piramidal.munich.recortada),
nrow=dim(piramidal.munich.recortada)[1], ncol=dim(piramidal.munich.recortada)[2]))))
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.munich)(piramidal.munich),
nrow=dim(piramidal.munich)[1], ncol=dim(piramidal.munich)[2]))))
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,76,79,"yellow",2)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,77,79,"blue",2)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,77,80,"red",2)#muestra3##########
######## coordenandas originales
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.munich)(piramidal.munich),
nrow=dim(piramidal.munich)[1], ncol=dim(piramidal.munich)[2]))))
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.MUNICH)(piramidal.MUNICH),
nrow=dim(piramidal.MUNICH)[1], ncol=dim(piramidal.MUNICH)[2]))))
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,76,79,"yellow",2)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,77,79,"blue",2)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,77,80,"red",2)#muestra3##########
y1R.nuevo<-77-48
y2R.nuevo<-80-48
y1B.nuevo<-77-48
y2B.nuevo<-79-48
y1A.nuevo<-76-48
y2A.nuevo<-79-48
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1R.nuevo,y2R.nuevo,"red",lwd)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1B.nuevo,y2B.nuevo,"blue",lwd)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1A.nuevo,y2A.nuevo,"yellow",lwd)#muestra1##########
lwd=2
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1R.nuevo,y2R.nuevo,"red",lwd)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1B.nuevo,y2B.nuevo,"blue",lwd)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1A.nuevo,y2A.nuevo,"yellow",lwd)#muestra1##########
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.MUNICH)(piramidal.MUNICH),
nrow=dim(piramidal.MUNICH)[1], ncol=dim(piramidal.MUNICH)[2]))))
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,76,79,"yellow",2)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,77,79,"blue",2)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.MUNICH,19,22,77,80,"red",2)#muestra3##########
lwd=2
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1R.nuevo,y2R.nuevo,"red",lwd)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1B.nuevo,y2B.nuevo,"blue",lwd)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1A.nuevo,y2A.nuevo,"yellow",lwd)#muestra1##########
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(normalize(matrix(ecdf(piramidal.MUNICH)(piramidal.MUNICH),
nrow=dim(piramidal.MUNICH)[1], ncol=dim(piramidal.MUNICH)[2]))))
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1R.nuevo,y2R.nuevo,"red",lwd)#muestra1##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1B.nuevo,y2B.nuevo,"blue",lwd)#muestra2##########
grafica.muestra.imagenRecortada(piramidal.munich.recortada,19,22,y1A.nuevo,y2A.nuevo,"yellow",lwd)#muestra1##########
library("wesanderson")
require(tidyverse)
require(ggthemes)
require(rstudioapi)
library("cubature")
library("Conake")
library("caTools")
library(MASS)
library("stats4")
set.seed(1234)
### DIRECTORIO DONDE ESTAN LAS BASES
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library("wesanderson")
require(tidyverse)
require(ggthemes)
require(rstudioapi)
library("cubature")
library("Conake")
library("caTools")
library(MASS)
library("stats4")
set.seed(1234)
### DIRECTORIO DONDE ESTAN LAS BASES
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
### CARGO RUTINAS
source("../Rutinas/imagematrix.R")
source("../Rutinas/myread.ENVI.R")
source("../Rutinas/estima numero de looks muestras de tamanio gral_V2.R")
source("../Rutinas/elige una muestra_V4.R")
source("../Rutinas/ModeloGammaKS_qqplot.R")
source("../Rutinas/MV_Gama.R")
source("../Rutinas/Define densidad GI0.R")
############################################
## PARA ESTIMAR PARAMETROS
source("../Rutinas/DistanciaTriangularNG1conCte.R")
source("../Rutinas/DistanciaTriangularLNconCte.R")
source("../Rutinas/LogcumulantOrden1.R")
source("../Rutinas/MV Estimador.R")
source("../Rutinas/EstimaUnPar_MuestrasReales.R")
source("../Rutinas/nucleos.R")                ###############
source("../Rutinas/CrossValidationdeR.R")     ###############
source("../Rutinas/MOM_1medio.R")
source("../Rutinas/Conakereport2conIntegrate.R")                ###############
source("../Rutinas/Conakereport2.R")
source("../Rutinas/procesamiento piramidal_V2.R")
source("../Rutinas/DensitiesGI0Alejandro.R")
source("../Rutinas/GraficaMuestra.R")
setwd("./Data/PaperTesis")
a0<-read.ENVI("dlr_munich_4s.flt")
b0<-a0^2
setwd("../../Data/PaperTesis")
a0<-read.ENVI("dlr_munich_4s.flt")
b0<-a0^2
imagen.recortada<-b0[180:450,20:250]
### GRAFICO LA IMAGEN NORMALIZADA Y ECUALIZADA
windows(width=6.5, height=6.5, rescale="fit")
plot(imagematrix(matrix(ecdf(imagen.recortada)(imagen.recortada), nrow=nrow(imagen.recortada))))
piramidal.MUNICH<-proc.piram(2,imagen.recortada)
#View(mapa.media)
dim(piramidal.MUNICH)
#L=mean(looks.piramidal$muestra)^2/sd(looks.piramidal$muestra)^2
L=3.21
muestra1.mat<-piramidal.MUNICH[76:79,19:22] "YELLOW"
